@page "/torrents"
@using TorrentGrease.Shared.TorrentClient
@inject ITorrentService TorrentService
@inject ILogger<Torrents> _logger

<h1>Torrents</h1>

@if (_selectableTorrents == null)
{
    <div class="sk-wave">
        <div class="sk-wave-rect"></div>
        <div class="sk-wave-rect"></div>
        <div class="sk-wave-rect"></div>
        <div class="sk-wave-rect"></div>
        <div class="sk-wave-rect"></div>
    </div>
}
else
{
    <Buttons Role="ButtonsRole.Toolbar">
        <Button data-content="show-remap-torrents-button" Color="Color.Primary" IsDisabled="@_isInWaitMode" Clicked="@ShowRemapTorrentsModal">Remap torrent location on disk</Button>
    </Buttons>

    <table class="table" data-content="torrents-container">
        <thead>
            <tr>
                <th>&nbsp;</th>
                <th>Info hash</th>
                <th>Name</th>
                <th>Downloaded</th>
                <th>Total size</th>
                <th>Total uploaded</th>
                <th>Date added</th>
                <th>Location on disk</th>
                <th>Tracker urls</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var selectableTorrent in _selectableTorrents)
            {
                var torrent = selectableTorrent.Item;
                <tr data-content="torrent">
                    <td data-content="selector">
                        <Blazorise.CheckEdit IsDisabled="@_isInWaitMode" @bind-Checked="selectableTorrent.IsSelected" />
                    </td>
                    <td data-content="info-hash">@torrent.InfoHash</td>
                    <td data-content="name">@torrent.Name</td>
                    <td><span data-content="data-on-disk-in-gb">@torrent.GBsOnDisk.ToString("N2")</span> GB</td>
                    <td><span data-content="size-in-gb">@torrent.SizeInGB.ToString("N2")</span> GB</td>
                    <td><span data-content="total-upload-in-gb">@torrent.TotalUploadInGB.ToString("N2")</span> GB</td>
                    <td data-content="date-added">@torrent.AddedDateTime.ToLocalTime().ToString("g")</td>
                    <td data-content="location">@torrent.Location</td>
                    <td data-content="trackerUrls">@String.Join(", ", torrent.TrackerUrls)</td>
                </tr>
            }
        </tbody>
    </table>

    <Modal data-content="remap-torrents-modal" @ref="_remapTorrentsModal" Closing="@OnRemapTorrentsModalClosing">
        <ModalBackdrop />
        <ModalContent IsCentered="true">
            <ModalHeader>
                <ModalTitle>Remap torrent location on disk</ModalTitle>
                <CloseButton IsDisabled="@_isInWaitMode" Clicked="@CloseRemapTorrentsModal" />
            </ModalHeader>
            <ModalBody>
                @for (int i = 0; i < _pathsToScan.Count; i++)
                {
                    var local = i;
                    <Field>
                        <FieldLabel>Path to scan</FieldLabel>
                        <TextEdit data-content="path-to-scan" IsDisabled="@_isInWaitMode" @bind-Text="@_pathsToScan[local]" />
                    </Field>
                }

                <Button data-content="add-path-to-scan-button" IsDisabled="@_isInWaitMode" Clicked="@AddPathToScan">Add path to scan</Button>
            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Secondary" IsDisabled="@_isInWaitMode" Clicked="@CloseRemapTorrentsModal">Close</Button>
                <Button data-content="show-remap-torrents-button" Color="Color.Primary" IsLoading="@_isRemapping" IsDisabled="@_isInWaitMode" Clicked="@RemapTorrentsAsync">Go</Button>
            </ModalFooter>
        </ModalContent>
    </Modal>
}

@code {
    Modal _remapTorrentsModal;
    IEnumerable<SelectableItem<Torrent>> _selectableTorrents;

    protected override async Task OnInitializedAsync()
    {
        _selectableTorrents = (await TorrentService.GetAllTorrentsAsync())
            .Select(i => new SelectableItem<Torrent>(i))
            .ToArray(); ;
    }


    //RemapTorrents todo move this code
    List<string> _pathsToScan = new List<String> { string.Empty };
    bool _isRemapping = false;
    bool _isInWaitMode => _isRemapping || _selectableTorrents == null;

    void ResetRemapTorrentsModel()
    {
        _pathsToScan.Clear();
        _pathsToScan.Add(string.Empty);
    }

    void AddPathToScan()
    {
        _pathsToScan.Add(string.Empty);
    }

    async Task RemapTorrentsAsync()
    {
        _logger.LogDebug("RemapTorrentsAsync called");
        var pathsToScan = _pathsToScan.Where(p => !string.IsNullOrWhiteSpace(p)).ToArray();

        _logger.LogDebug("pathsToScan: {0}", string.Join(", ", pathsToScan));
        var torrentIDs = _selectableTorrents
        .Where(st => st.IsSelected)
        .Select(st => st.Item.ID)
        .ToArray();

        _logger.LogDebug("torrentIDs: {0}", string.Join(", ", torrentIDs));

        _isRemapping = true;
        await TorrentService.MapTorrentsToDiskAsync(pathsToScan, torrentIDs);
        _isRemapping = false;
        CloseRemapTorrentsModal();
    }

    void ShowRemapTorrentsModal()
    {
        ResetRemapTorrentsModel();
        _remapTorrentsModal.Show();
    }

    void CloseRemapTorrentsModal()
    {
        _remapTorrentsModal.Hide();
    }

    void OnRemapTorrentsModalClosing(CancelEventArgs e)
    {
        e.Cancel = _isRemapping;
    }
}
