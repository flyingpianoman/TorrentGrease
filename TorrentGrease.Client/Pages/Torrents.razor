@page "/torrents"
@using TorrentGrease.Shared.TorrentClient
@using TorrentGrease.Shared.RelocateTorrent;
@inject ITorrentService TorrentService
@inject ILogger<Torrents> _logger

<h1>Torrents</h1>
@if (_selectableTorrents == null)
{
    <div class="sk-wave">
        <div class="sk-wave-rect"></div>
        <div class="sk-wave-rect"></div>
        <div class="sk-wave-rect"></div>
        <div class="sk-wave-rect"></div>
        <div class="sk-wave-rect"></div>
    </div>
}
else
{
<div data-content="torrent-overview">
    <p class="bs-component">
        <Button data-content="reload-torrents-button" Color="Color.Primary" IsDisabled="@_isInWaitMode" Clicked="@ReloadTorrents">Refresh</Button>
        <Button data-content="select-all-torrents-button" Color="Color.Primary" IsDisabled="@_isInWaitMode" Clicked="@SelectAllTorrents">Select all</Button>
        <Button data-content="only-show-torrents-without-data-button" Color="Color.Primary" IsDisabled="@_isInWaitMode" Clicked="@OnlyShowTorrentsWithoutData">Only show torrents without data</Button>
        <Button data-content="show-relocate-torrents-button" Color="Color.Primary" IsDisabled="@_isInWaitMode" Clicked="@ShowTorrentRelocator">Relocate torrent data</Button>
    </p>

    <table class="table" data-content="torrents-container">
        <thead>
            <tr>
                <th>&nbsp;</th>
                <th>Name</th>
                <th>% available</th>
                <th>Downloaded</th>
                <th>Total size</th>
                <th>Total uploaded</th>
                <th>Date added</th>
                <th>Location on disk</th>
                <th>Tracker urls</th>
                <th>Error</th>
            </tr>
        </thead>
        <tbody>
            <TorrentGrease.Client.Components.PagedList @ref="PagedTorrentList" TItem="SelectableItem<Torrent>" AllItems="_selectableTorrents" PageSize="50">
                @{
                    var selectableTorrent = context;
                    var torrent = selectableTorrent.Item;
                }
                <tr data-content="torrent">
                    <td>
                        <Blazorise.Check data-content="selector" IsDisabled="@_isInWaitMode" @bind-Checked="@selectableTorrent.IsSelected" />
                    </td>
                    <td data-content="name">@torrent.Name</td>
                    <td><span data-content="percentage-available">@Math.Round((decimal)torrent.BytesOnDisk / torrent.SizeInBytes * 100, 2).ToString("N2")</span>%</td>
                    <td><span data-content="data-on-disk-in-gb">@torrent.GBsOnDisk.ToString("N2")</span> GB</td>
                    <td><span data-content="size-in-gb">@torrent.SizeInGB.ToString("N2")</span> GB</td>
                    <td><span data-content="total-upload-in-gb">@torrent.TotalUploadInGB.ToString("N2")</span> GB</td>
                    <td data-content="date-added">@torrent.AddedDateTime.ToLocalTime().ToString("g")</td>
                    <td data-content="location">@torrent.Location</td>
                    <td data-content="trackerUrls">@String.Join(", ", torrent.TrackerUrls)</td>
                    <td data-content="error">@torrent.Error</td>
                </tr>
            </TorrentGrease.Client.Components.PagedList>
        </tbody>
    </table>

    <TorrentGrease.Client.Components.PagedListPaginator TItem="SelectableItem<Torrent>" PagedList="PagedTorrentList" />

    <TorrentGrease.Client.Components.TorrentRelocator @ref="_torrentRelocator" Torrents="SelectedTorrents" />

</div>
}

@code {
    TorrentGrease.Client.Components.PagedList<SelectableItem<Torrent>> PagedTorrentList;
    bool _hasTorrentListBeenVisible = false;
    IEnumerable<SelectableItem<Torrent>> _selectableTorrents;
    TorrentGrease.Client.Components.TorrentRelocator _torrentRelocator;
    bool _isInWaitMode => _torrentRelocator.IsInWaitMode || _selectableTorrents == null;

    public IEnumerable<Torrent> SelectedTorrents => _selectableTorrents
        ?.Where(st => st.IsSelected)
        ?.Select(st => st.Item) ?? new Torrent[] { };

    protected override async Task OnInitializedAsync()
    {
        await LoadTorrentsAsync().ConfigureAwait(false);
    }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        if (!_hasTorrentListBeenVisible && PagedTorrentList != null)
        {
            _hasTorrentListBeenVisible = true;
            StateHasChanged(); //this will cause the paginator to be rendered
        }
    }

    public async Task ReloadTorrents()
    {
        await LoadTorrentsAsync().ConfigureAwait(false);
    }

    private async Task LoadTorrentsAsync()
    {
        _selectableTorrents = (await TorrentService.GetAllTorrentsAsync())
            .Select(i => new SelectableItem<Torrent>(i))
            .ToArray();
    }

    private void SelectAllTorrents()
    {
        foreach (var selectableTorrent in _selectableTorrents)
        {
            selectableTorrent.IsSelected = true;
        }
    }

    private void OnlyShowTorrentsWithoutData()
    {
        _selectableTorrents = _selectableTorrents.Where(t => t.Item.BytesOnDisk == 0).ToList();
    }

    public void ShowTorrentRelocator()
    {
        _torrentRelocator.Show();
    }
}