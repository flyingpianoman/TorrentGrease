@page "/torrents"
@using TorrentGrease.Shared.TorrentClient
@using TorrentGrease.Shared.RelocateTorrent;
@inject ITorrentService TorrentService
@inject ILogger<Torrents> _logger

<h1>Torrents</h1>

@if (_selectableTorrents == null)
{
    <div class="sk-wave">
        <div class="sk-wave-rect"></div>
        <div class="sk-wave-rect"></div>
        <div class="sk-wave-rect"></div>
        <div class="sk-wave-rect"></div>
        <div class="sk-wave-rect"></div>
    </div>
}
else
{
    <Buttons Role="ButtonsRole.Toolbar">
        <Button data-content="show-relocate-torrents-button" Color="Color.Primary" IsDisabled="@_isInWaitMode" Clicked="@ShowRelocateTorrentsModal">Relocate torrent location on disk</Button>
    </Buttons>

    <table class="table" data-content="torrents-container">
        <thead>
            <tr>
                <th>&nbsp;</th>
                <th>Info hash</th>
                <th>Name</th>
                <th>Downloaded</th>
                <th>Total size</th>
                <th>Total uploaded</th>
                <th>Date added</th>
                <th>Location on disk</th>
                <th>Tracker urls</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var selectableTorrent in _selectableTorrents)
            {
                var torrent = selectableTorrent.Item;
                <tr data-content="torrent">
                    <td>
                        <Blazorise.CheckEdit data-content="selector" IsDisabled="@_isInWaitMode" @bind-Checked="selectableTorrent.IsSelected" />
                    </td>
                    <td data-content="info-hash">@torrent.InfoHash</td>
                    <td data-content="name">@torrent.Name</td>
                    <td><span data-content="data-on-disk-in-gb">@torrent.GBsOnDisk.ToString("N2")</span> GB</td>
                    <td><span data-content="size-in-gb">@torrent.SizeInGB.ToString("N2")</span> GB</td>
                    <td><span data-content="total-upload-in-gb">@torrent.TotalUploadInGB.ToString("N2")</span> GB</td>
                    <td data-content="date-added">@torrent.AddedDateTime.ToLocalTime().ToString("g")</td>
                    <td data-content="location">@torrent.Location</td>
                    <td data-content="trackerUrls">@String.Join(", ", torrent.TrackerUrls)</td>
                </tr>
            }
        </tbody>
    </table>

    <Modal data-content="relocate-torrents-modal" @ref="_relocateTorrentsModal" Closing="@OnRelocateTorrentsModalClosing">
        <ModalBackdrop />
        <ModalContent Class="modal-xl" IsCentered="true">
            <ModalHeader>
                <ModalTitle>Relocate torrent location on disk</ModalTitle>
                <CloseButton IsDisabled="@_isInWaitMode" Clicked="@CloseRelocateTorrentsModal" />
            </ModalHeader>
            <ModalBody>
                @if (RelocateTorrentsStage == RelocateTorrentsStages.FindCandidates)
                {
                    @for (int i = 0; i < _pathsToScan.Count; i++)
                    {
                        var local = i;
                        <Field>
                            <FieldLabel>Path to scan</FieldLabel>
                            <TextEdit data-content="path-to-scan" IsDisabled="@_isInWaitMode" @bind-Text="@_pathsToScan[local]" />
                        </Field>
                    }

                    <Button data-content="add-path-to-scan-button" Color="Color.Primary" IsDisabled="@_isInWaitMode" Clicked="@AddPathToScan">Add path to scan</Button>
                }
                else if (RelocateTorrentsStage == RelocateTorrentsStages.RelocateCandidates)
                {
                    <table class="table">
                        <thead>
                            <tr>
                                <th>&nbsp;</th>
                                <th>Torrent</th>
                                <th>Relocation options</th>
                                <th>Relocation choice</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var selectableRelocatableTorrentCandidate in _relocatableTorrentCandidates)
                            {
                                var relocatableTorrentCandidate = selectableRelocatableTorrentCandidate.Item;
                                <tr>
                                    <td>
                                        @if (relocatableTorrentCandidate.RelocateOptions.Any())
                                        {
                                            <Blazorise.CheckEdit data-content="selector" IsDisabled="@(_isInWaitMode)" @bind-Checked="selectableRelocatableTorrentCandidate.IsSelected" />
                                        }
                                        else
                                        {
                                            <span>&nbsp;</span>
                                        }
                                    </td>
                                    <td>@relocatableTorrentCandidate.TorrentName</td>
                                    <td>@relocatableTorrentCandidate.RelocateOptions.Count</td>
                                    <td>
                                        @if (relocatableTorrentCandidate.RelocateOptions.Any())
                                        {
                                            <Blazorise.SelectEdit IsDisabled="_isInWaitMode" @bind-SelectedValue="relocatableTorrentCandidate.ChosenOption" TValue="string">
                                                @foreach (var relocateOption in relocatableTorrentCandidate.RelocateOptions)
                                                {
                                                    <Blazorise.SelectItem Value="relocateOption">@relocateOption</Blazorise.SelectItem>
                                                }
                                            </Blazorise.SelectEdit>
                                        }
                                        else
                                        {
                                            <span>No relocate options found</span>
                                        }
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>

                    <Field>
                        <Blazorise.CheckEdit data-content="verify-torrents-after-relocating" IsDisabled="@(_isInWaitMode)" @bind-Checked="_verifyTorrentsAfterRelocating" />
                        <FieldLabel>Verify torrents after relocating</FieldLabel>
                    </Field>
                }
            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Secondary" IsDisabled="@_isInWaitMode" Clicked="@CloseRelocateTorrentsModal">Close</Button>
                @if (RelocateTorrentsStage == RelocateTorrentsStages.FindCandidates)
                {
                    <Button data-content="scan-for-candidates-button" Color="Color.Primary" IsLoading="@_isScanningForRelocatableTorrents" IsDisabled="@_isInWaitMode" Clicked="@ScanForRelocatableTorrentsAsync">Scan for relocatable torrents</Button>
                }
                else if (RelocateTorrentsStage == RelocateTorrentsStages.RelocateCandidates)
                { 
                    <Button data-content="relocate-candidates-button" Color="Color.Primary" IsLoading="@_isRelocatingTorrents" IsDisabled="@_isInWaitMode" Clicked="@RelocateTorrentsAsync">Relocate torrents</Button>
                }
            </ModalFooter>
        </ModalContent>
    </Modal>
                }

@code {
    Modal _relocateTorrentsModal;
    IEnumerable<SelectableItem<Torrent>> _selectableTorrents;

    protected override async Task OnInitializedAsync()
    {
        _selectableTorrents = (await TorrentService.GetAllTorrentsAsync())
            .Select(i => new SelectableItem<Torrent>(i))
            .ToArray(); ;
    }

    //RelocateTorrents todo move this code
    public enum RelocateTorrentsStages { FindCandidates, RelocateCandidates };
    public RelocateTorrentsStages RelocateTorrentsStage => _relocatableTorrentCandidates == null
        ? RelocateTorrentsStages.FindCandidates
        : RelocateTorrentsStages.RelocateCandidates;

    List<string> _pathsToScan = new List<String> { string.Empty };
    IEnumerable<SelectableItem<RelocatableTorrentCandidate>> _relocatableTorrentCandidates;
    bool _isScanningForRelocatableTorrents = false;
    bool _isRelocatingTorrents = false;
    bool _verifyTorrentsAfterRelocating = true;
    bool _isInWaitMode => _isScanningForRelocatableTorrents || _isRelocatingTorrents || _selectableTorrents == null;

    void ResetRelocateTorrentsModel()
    {
        _pathsToScan.Clear();
        _pathsToScan.Add(string.Empty);
        _relocatableTorrentCandidates = null;
        _verifyTorrentsAfterRelocating = true;
        _isRelocatingTorrents = false;
        _isScanningForRelocatableTorrents = false;
    }

    void AddPathToScan()
    {
        _pathsToScan.Add(string.Empty);
    }

    async Task ScanForRelocatableTorrentsAsync()
    {
        var pathsToScan = _pathsToScan.Where(p => !string.IsNullOrWhiteSpace(p)).ToArray();

        var torrentIDs = _selectableTorrents
            .Where(st => st.IsSelected)
            .Select(st => st.Item.ID)
            .ToArray();

        _isScanningForRelocatableTorrents = true;
        _relocatableTorrentCandidates = (await TorrentService.FindRelocatableTorrentCandidatesAsync(pathsToScan, torrentIDs))
            .Select(i => new SelectableItem<RelocatableTorrentCandidate>(i))
            .ToArray();

        foreach (var relocatableTorrentCandidate in _relocatableTorrentCandidates)
        {
            if (relocatableTorrentCandidate.Item.RelocateOptions.Any())
            {
                relocatableTorrentCandidate.IsSelected = true;
            }
        }

        _isScanningForRelocatableTorrents = false;
    }

    async Task RelocateTorrentsAsync()
    {
        var relocateTorrentCommands = _relocatableTorrentCandidates
            .Where(s => s.IsSelected)
            .Select(s => new RelocateTorrentCommand
            {
                TorrentID = s.Item.TorrentID,
                NewLocation = s.Item.ChosenOption
            })
            .ToList();

        _isRelocatingTorrents = true;
        await TorrentService.RelocateTorrentsAsync(relocateTorrentCommands, _verifyTorrentsAfterRelocating).ConfigureAwait(false);
        _isRelocatingTorrents = false;

        CloseRelocateTorrentsModal();
    }

    void ShowRelocateTorrentsModal()
    {
        ResetRelocateTorrentsModel();
        _relocateTorrentsModal.Show();
    }

    void CloseRelocateTorrentsModal()
    {
        _relocateTorrentsModal.Hide();
    }

    void OnRelocateTorrentsModalClosing(CancelEventArgs e)
    {
        e.Cancel = _isScanningForRelocatableTorrents;
    }
}
