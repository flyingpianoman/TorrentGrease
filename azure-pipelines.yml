trigger:
- master

pool:
  vmImage: 'ubuntu-latest'

steps:
- task: GitVersion@5
  inputs:
    runtime: 'core'
    configFilePath: './GitVersion.yml'

- task: UseDotNet@2
  displayName: Install dotnet 5.0 sdk
  inputs:
    packageType: 'sdk'
    version: '5.0.x'
    includePreviewVersions: false
    
- task: Docker@2
  displayName: Docker build
  inputs:
    containerRegistry: 'Dockerhub'
    repository: 'flyingpianoman/torrent-grease'
    command: 'build'
    Dockerfile: 'TorrentGrease.Server/Dockerfile'
    buildContext: '.'
    arguments: '--build-arg VERSION=$(GitVersion.NugetVersion)'
    tags: |
      $(GitVersion.NugetVersion)
      latest


- task: DockerCompose@0
  displayName: Docker-compose up
  inputs:
    containerregistrytype: 'Container Registry'
    dockerRegistryEndpoint: 'Dockerhub'
    dockerComposeFile: 'docker-compose/docker-compose.yml'
    additionalDockerComposeFiles: 'docker-compose.ci.yml'
    dockerComposeFileArgs: 'VERSION=$(GitVersion.NugetVersion)'
    action: 'Run a Docker Compose command'
    dockerComposeCommand: 'up -d --no-build'
    
- script: |
    set -e
    echo "Waiting torrent-grease to become healthy"
    try=1
    maxTries=600

    until [ "`docker inspect -f {{.State.Health.Status}} torrent-grease`" == "healthy" ]; 
    do
        if [ $try == $maxTries ]; 
        then
            echo "Maxtries reached, failing"
            exit 1
        fi

        try=`expr $try + 1`
        
        sleep 0.1;
    done;

    echo "torrent-grease is healthy"
  failOnStderr: true
  timeoutInMinutes: 5
  displayName: 'Waiti for torrent-grease to become healthy'

- task: DotNetCoreCLI@2
  displayName: dotnet test IntegrationTest
  inputs:
    command: 'test'
    projects: 'IntegrationTest/IntegrationTest.csproj'
    testRunTitle: 'IntegrationTest'
    
- task: DotNetCoreCLI@2
  displayName: dotnet test SpecificationTest
  inputs:
    command: 'test'
    projects: 'SpecificationTest/SpecificationTest.csproj'
    testRunTitle: 'SpecificationTest'

- task: DockerCompose@0
  displayName: Docker-compose logs
  condition: succeededOrFailed()
  inputs:
    containerregistrytype: 'Container Registry'
    dockerRegistryEndpoint: 'Dockerhub'
    dockerComposeFile: 'docker-compose/docker-compose.yml'
    additionalDockerComposeFiles: 'docker-compose.ci.yml'
    action: 'Run a Docker Compose command'
    dockerComposeCommand: 'logs'

- task: Docker@2
  displayName: Docker push
  inputs:
    containerRegistry: 'Dockerhub'
    repository: 'flyingpianoman/torrent-grease'
    command: 'push'
    tags: |
      $(GitVersion.NugetVersion)
      latest